// This file is auto generated by the protocol-buffers compiler

/* eslint-disable quotes */
/* eslint-disable indent */
/* eslint-disable no-redeclare */
/* eslint-disable camelcase */

var encodings = require('hrpc-runtime/encodings')
var varint = encodings.varint
var skip = encodings.skip

var Email = exports.Email = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var FileRequest = exports.FileRequest = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var FileResponse = exports.FileResponse = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var DriveRequest = exports.DriveRequest = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var PeerRequest = exports.PeerRequest = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var PeerKeyPair = exports.PeerKeyPair = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var DriveKey = exports.DriveKey = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var Empty = exports.Empty = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var RPCError = exports.RPCError = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

defineEmail()
defineFileRequest()
defineFileResponse()
defineDriveRequest()
definePeerRequest()
definePeerKeyPair()
defineDriveKey()
defineEmpty()
defineRPCError()

function defineEmail () {
  Email.encodingLength = encodingLength
  Email.encode = encode
  Email.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.email)) {
      var len = encodings.string.encodingLength(obj.email)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.email)) {
      buf[offset++] = 10
      encodings.string.encode(obj.email, buf, offset)
      offset += encodings.string.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      email: ""
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.email = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineFileRequest () {
  FileRequest.encodingLength = encodingLength
  FileRequest.encode = encode
  FileRequest.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.fileName)) {
      var len = encodings.string.encodingLength(obj.fileName)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.fileName)) {
      buf[offset++] = 10
      encodings.string.encode(obj.fileName, buf, offset)
      offset += encodings.string.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      fileName: ""
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.fileName = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineFileResponse () {
  FileResponse.encodingLength = encodingLength
  FileResponse.encode = encode
  FileResponse.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.key)) {
      var len = encodings.string.encodingLength(obj.key)
      length += 1 + len
    }
    if (defined(obj.header)) {
      var len = encodings.string.encodingLength(obj.header)
      length += 1 + len
    }
    if (defined(obj.driveKey)) {
      var len = encodings.string.encodingLength(obj.driveKey)
      length += 1 + len
    }
    if (defined(obj.fileName)) {
      var len = encodings.string.encodingLength(obj.fileName)
      length += 1 + len
    }
    if (defined(obj.fileSize)) {
      var len = encodings.string.encodingLength(obj.fileSize)
      length += 1 + len
    }
    if (defined(obj.fileHash)) {
      var len = encodings.string.encodingLength(obj.fileHash)
      length += 1 + len
    }
    if (defined(obj.path)) {
      var len = encodings.string.encodingLength(obj.path)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.key)) {
      buf[offset++] = 10
      encodings.string.encode(obj.key, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.header)) {
      buf[offset++] = 18
      encodings.string.encode(obj.header, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.driveKey)) {
      buf[offset++] = 26
      encodings.string.encode(obj.driveKey, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.fileName)) {
      buf[offset++] = 34
      encodings.string.encode(obj.fileName, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.fileSize)) {
      buf[offset++] = 42
      encodings.string.encode(obj.fileSize, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.fileHash)) {
      buf[offset++] = 50
      encodings.string.encode(obj.fileHash, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.path)) {
      buf[offset++] = 58
      encodings.string.encode(obj.path, buf, offset)
      offset += encodings.string.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      key: "",
      header: "",
      driveKey: "",
      fileName: "",
      fileSize: "",
      fileHash: "",
      path: ""
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.key = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 2:
        obj.header = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 3:
        obj.driveKey = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 4:
        obj.fileName = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 5:
        obj.fileSize = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 6:
        obj.fileHash = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 7:
        obj.path = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineDriveRequest () {
  DriveRequest.encodingLength = encodingLength
  DriveRequest.encode = encode
  DriveRequest.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.name)) {
      var len = encodings.string.encodingLength(obj.name)
      length += 1 + len
    }
    if (defined(obj.driveKey)) {
      var len = encodings.string.encodingLength(obj.driveKey)
      length += 1 + len
    }
    if (defined(obj.peerKeyPair)) {
      var len = PeerKeyPair.encodingLength(obj.peerKeyPair)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    if (defined(obj.writable)) {
      var len = encodings.bool.encodingLength(obj.writable)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.name)) {
      buf[offset++] = 10
      encodings.string.encode(obj.name, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.driveKey)) {
      buf[offset++] = 18
      encodings.string.encode(obj.driveKey, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.peerKeyPair)) {
      buf[offset++] = 26
      varint.encode(PeerKeyPair.encodingLength(obj.peerKeyPair), buf, offset)
      offset += varint.encode.bytes
      PeerKeyPair.encode(obj.peerKeyPair, buf, offset)
      offset += PeerKeyPair.encode.bytes
    }
    if (defined(obj.writable)) {
      buf[offset++] = 32
      encodings.bool.encode(obj.writable, buf, offset)
      offset += encodings.bool.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      name: "",
      driveKey: "",
      peerKeyPair: null,
      writable: false
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.name = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 2:
        obj.driveKey = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 3:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.peerKeyPair = PeerKeyPair.decode(buf, offset, offset + len)
        offset += PeerKeyPair.decode.bytes
        break
        case 4:
        obj.writable = encodings.bool.decode(buf, offset)
        offset += encodings.bool.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function definePeerRequest () {
  PeerRequest.encodingLength = encodingLength
  PeerRequest.encode = encode
  PeerRequest.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.driveKey)) {
      var len = encodings.string.encodingLength(obj.driveKey)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.driveKey)) {
      buf[offset++] = 10
      encodings.string.encode(obj.driveKey, buf, offset)
      offset += encodings.string.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      driveKey: ""
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.driveKey = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function definePeerKeyPair () {
  PeerKeyPair.encodingLength = encodingLength
  PeerKeyPair.encode = encode
  PeerKeyPair.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.publicKey)) {
      var len = encodings.string.encodingLength(obj.publicKey)
      length += 1 + len
    }
    if (defined(obj.secretKey)) {
      var len = encodings.string.encodingLength(obj.secretKey)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.publicKey)) {
      buf[offset++] = 10
      encodings.string.encode(obj.publicKey, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.secretKey)) {
      buf[offset++] = 18
      encodings.string.encode(obj.secretKey, buf, offset)
      offset += encodings.string.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      publicKey: "",
      secretKey: ""
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.publicKey = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 2:
        obj.secretKey = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineDriveKey () {
  DriveKey.encodingLength = encodingLength
  DriveKey.encode = encode
  DriveKey.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.driveKey)) {
      var len = encodings.string.encodingLength(obj.driveKey)
      length += 1 + len
    }
    if (defined(obj.discoveryKey)) {
      var len = encodings.string.encodingLength(obj.discoveryKey)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.driveKey)) {
      buf[offset++] = 10
      encodings.string.encode(obj.driveKey, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.discoveryKey)) {
      buf[offset++] = 18
      encodings.string.encode(obj.discoveryKey, buf, offset)
      offset += encodings.string.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      driveKey: "",
      discoveryKey: ""
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.driveKey = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 2:
        obj.discoveryKey = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineEmpty () {
  Empty.encodingLength = encodingLength
  Empty.encode = encode
  Empty.decode = decode

  function encodingLength (obj) {
    var length = 0
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineRPCError () {
  RPCError.encodingLength = encodingLength
  RPCError.encode = encode
  RPCError.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.message)) throw new Error("message is required")
    var len = encodings.string.encodingLength(obj.message)
    length += 1 + len
    if (defined(obj.code)) {
      var len = encodings.string.encodingLength(obj.code)
      length += 1 + len
    }
    if (defined(obj.errno)) {
      var len = encodings.int32.encodingLength(obj.errno)
      length += 1 + len
    }
    if (defined(obj.details)) {
      var len = encodings.string.encodingLength(obj.details)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.message)) throw new Error("message is required")
    buf[offset++] = 10
    encodings.string.encode(obj.message, buf, offset)
    offset += encodings.string.encode.bytes
    if (defined(obj.code)) {
      buf[offset++] = 18
      encodings.string.encode(obj.code, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.errno)) {
      buf[offset++] = 24
      encodings.int32.encode(obj.errno, buf, offset)
      offset += encodings.int32.encode.bytes
    }
    if (defined(obj.details)) {
      buf[offset++] = 34
      encodings.string.encode(obj.details, buf, offset)
      offset += encodings.string.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      message: "",
      code: "",
      errno: 0,
      details: ""
    }
    var found0 = false
    while (true) {
      if (end <= offset) {
        if (!found0) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.message = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        found0 = true
        break
        case 2:
        obj.code = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 3:
        obj.errno = encodings.int32.decode(buf, offset)
        offset += encodings.int32.decode.bytes
        break
        case 4:
        obj.details = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defined (val) {
  return val !== null && val !== undefined && (typeof val !== 'number' || !isNaN(val))
}
